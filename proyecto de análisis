{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Clarificación del Enunciado:\n",
    "\n",
    "R: Se trata de un problema de clasificación, en el cual se trabajara con una lista de comentarios de twitter, donde debemos analizar el tipo de emoción que expresa dicho comentario. Para lo anterior se trabajar con las librerias enunciadas y según la descripción en el siguiente bloque de codigo."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Selección de Métricas y Estrategia de División de Muestras:\n",
    "\n",
    "R: Por tratarse de un ejercicio de clasificación, trabajaremos con metricas de rendimiento como accuracy, recall, F1, Precision. La estrategia de division de muestras sera por medio del metodo train_test_split pero con validacion cruzada ya que de esta se promedian las métricas de rendimiento para obtener una evaluación más robusta del modelo."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Preprocesamiento de Datos:\n",
    "\n",
    "R: Es necesario antes de comenzar el respectivo EDA revisar el tipo de datos con el que se trabajara, ya que en este caso los datos a analizar son textos, lo cuales no es posible valorizar númericamente de forma directa, por lo cual en primer lugar debemos lematizar las palabras, y luego se podra asignar un valor númerico a cada una por medio de la vectorización de cada termino. Lo anterior permitira al sistema trabajar con terminos expresado en funcion de vectores matematicos. Luego para la division de set de entrenamiento y prueba se realizara se trabajar con el método train_test_split conjunto a validación cruzada."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Declaración de Modelos con Grid de Hiperparámetros:\n",
    "\n",
    "En el ejercicio de clasificación, se están utilizando varios modelos de machine learning junto con un grid de hiperparámetros para ajustar y encontrar el mejor modelo para el problema en cuestión. Aquí hay un resumen de los modelos y los parámetros que se están ajustando:\n",
    "\n",
    "BernoulliNB:\n",
    "Modelo: Bernoulli Naive Bayes.\n",
    "Parámetros a ajustar:\n",
    "alpha: Un parámetro de suavizado de Laplace. Se prueban tres valores: 0, 0.1 y 1.\n",
    "fit_prior: Un booleano que indica si se deben ajustar las probabilidades a priori. Se prueban dos opciones: Verdadero y Falso.\n",
    "\n",
    "DecisionTreeClassifier:\n",
    "Modelo: Árbol de decisión.\n",
    "Parámetros a ajustar:\n",
    "max_depth: La profundidad máxima del árbol. Se prueban varios valores: 3, 5, 7, 9, 11 y 13.\n",
    "criterion: El criterio para medir la calidad de una división en el árbol. Se prueban dos opciones: 'gini' y 'entropía'.\n",
    "\n",
    "RandomForestClassifier:\n",
    "Modelo: Bosque aleatorio (Random Forest).\n",
    "Parámetros a ajustar:\n",
    "n_estimators: El número de árboles en el bosque. Se prueban cinco valores: 5, 10, 15, 20 y 25.\n",
    "max_depth: La profundidad máxima de los árboles en el bosque. Se prueban varios valores: 3, 5, 7, 9, 11 y 13.\n",
    "\n",
    "SVC:\n",
    "Modelo: Support Vector Classifier (SVC).\n",
    "Parámetros a ajustar:\n",
    "C: El parámetro de regularización. Se prueban tres valores: 0.01, 0.1 y 1.\n",
    "kernel: El kernel utilizado en el algoritmo. Se prueban cuatro opciones: 'lineal', 'polinómico', 'rbf' y 'sigmoide'.\n",
    "gamma: El coeficiente del kernel. Se prueban dos opciones: 'escala' y 'auto'.\n",
    "\n",
    "LogisticRegression:\n",
    "Modelo: Regresión logística.\n",
    "Parámetros a ajustar:\n",
    "C: El inverso del parámetro de regularización. Se prueban cuatro valores: 0.001, 0.01, 0.1 y 1.\n",
    "penalty: El término de regularización que se aplica ('l1' para regularización L1 y 'l2' para regularización L2).\n",
    "\n",
    "\n",
    "Estos modelos y sus respectivos parámetros se utilizan para explorar diferentes configuraciones y encontrar la combinación óptima que produzca el mejor rendimiento en la tarea de clasificación. El objetivo es ajustar los modelos para obtener resultados precisos y generalizables.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Análisis del Vector Objetivo:\n",
    "R: En primer lugar el vector objetivo cuenta con al menos 7 clases distintas que expresan distintos sentimientos, para terminos practicos y con la finalidad de optimizar los tiempos de analisis, se recodificara dicha columna con el fin de reducirlo a solo dos clases las cuales seran 'positivo'\n",
    " y 'negativo'. En caso de no realizar lo anterior se corre el riesgo que simplemente el algoritmo no logre evaluar ni un solo modelo, ya que la cantidad de iteraciones que deberia realizar le restarian eficiencia."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\56953\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package omw-1.4 to\n",
      "[nltk_data]     C:\\Users\\56953\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package omw-1.4 is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to\n",
      "[nltk_data]     C:\\Users\\56953\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "# Librerias de analisis de datos\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Librerias para grficar resultados.\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Librerias de analisis estadistico de datos\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.naive_bayes import BernoulliNB\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score, log_loss\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from transformers import AutoTokenizer, AutoModelForSequenceClassification\n",
    "from scipy.special import softmax\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "\n",
    "# Libreria para manipulación de texto.\n",
    "import re\n",
    "\n",
    "# Libreria para serializar modelos analisis estadistico.\n",
    "import pickle\n",
    "\n",
    "# Configuramos para omitir las advertencias RuntimeWarning\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# Configuramos el estilo para las gráficas.\n",
    "plt.style.use('ggplot')\n",
    "plt.rcParams['figure.figsize'] = (10, 6)\n",
    "\n",
    "# Descargamos recursos de NLTK\n",
    "import nltk\n",
    "nltk.download('stopwords')\n",
    "nltk.download('omw-1.4')\n",
    "nltk.download('wordnet')\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import WordNetLemmatizer\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora realizaremos la carga de los datos para su revision y limpieza."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('training_tweets.csv')\n",
    "df.rename(columns={'Unnamed: 0': 'tweet_id'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>content</th>\n",
       "      <th>sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>34723</td>\n",
       "      <td>Happy Mama's day to all mothers</td>\n",
       "      <td>love</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>17493</td>\n",
       "      <td>@LysdelTellez I am lost. Please help me find a...</td>\n",
       "      <td>worry</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20198</td>\n",
       "      <td>@BoomKatt yes yes I AM, networking whore to th...</td>\n",
       "      <td>happiness</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6855</td>\n",
       "      <td>you@snapplynn Wish that would have been your t...</td>\n",
       "      <td>neutral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5924</td>\n",
       "      <td>now i am doing the MicroEconomics project  iha...</td>\n",
       "      <td>worry</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   tweet_id                                            content  sentiment\n",
       "0     34723                    Happy Mama's day to all mothers       love\n",
       "1     17493  @LysdelTellez I am lost. Please help me find a...      worry\n",
       "2     20198  @BoomKatt yes yes I AM, networking whore to th...  happiness\n",
       "3      6855  you@snapplynn Wish that would have been your t...    neutral\n",
       "4      5924  now i am doing the MicroEconomics project  iha...      worry"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 30000 entries, 0 to 29999\n",
      "Data columns (total 3 columns):\n",
      " #   Column     Non-Null Count  Dtype \n",
      "---  ------     --------------  ----- \n",
      " 0   tweet_id   30000 non-null  int64 \n",
      " 1   content    30000 non-null  object\n",
      " 2   sentiment  30000 non-null  object\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 703.3+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Limpieza de texto, recodificación, eliminación de stopwords y lematización."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Realizamos la limpieza de los datos, quitando el ruido que por lo general se expresa en simbolos,\n",
    "# y caracteres a los que no se puede atribuir un valor numeral para su analisis.\n",
    "\n",
    "def clean_text(text):\n",
    "    text = re.sub(r'@[A-Z_a-z_0-9_]+', '', text)\n",
    "    text = re.sub(r'https?:\\/\\/\\S+', '', text)\n",
    "    text = re.sub(r'#', '', text)\n",
    "    text = re.sub('[^A-Za-z0-9]', ' ', text)\n",
    "    text = text.lower()\n",
    "    return text\n",
    "\n",
    "df['content'] = df['content'].apply(clean_text)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Recodificamos los sentiments de la columna 'sentiment' en un diccionario.\n",
    "\n",
    "recoding_dict = {\n",
    "    'happiness': 'positive',\n",
    "    'love': 'positive',\n",
    "    'surprise': 'positive',\n",
    "    'fun': 'positive',\n",
    "    'relief': 'positive',\n",
    "    'enthusiasm': 'positive',\n",
    "    'worry': 'negative',\n",
    "    'sadness': 'negative',\n",
    "    'hate': 'negative',\n",
    "    'empty': 'negative',\n",
    "    'boredom': 'negative',\n",
    "    'anger': 'negative',\n",
    "    'neutral': 'neutral',\n",
    "}\n",
    "df['sentiment'] = df['sentiment'].replace(recoding_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['positive', 'negative', 'neutral'], dtype=object)"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ya que la columna 'sentiment' debe ser recodificada posteriormente, revisamos cuantas clases tiene para poder comparar luego de haber recodificado.\n",
    "df['sentiment'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tweet_id     0\n",
       "content      0\n",
       "sentiment    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Revisamos si existen datos perdidos.\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En las siguientes lineas de código se recodificara la variable 'sentiment' para dejar solo dos clases 'positivo' y 'negativo'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Recodificamos el vector objetivo para combinar neutrales con positivos y negativos.\n",
    "df['sentiment'] = df['sentiment'].replace({'neutral': 'positive'})\n",
    "\n",
    "# Calculamos la proporción actual de positivos y negativos.\n",
    "proporcion_positivos = (df['sentiment'] == 'positive').mean()\n",
    "proporcion_negativos = (df['sentiment'] == 'negative').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculamos la cantidad de neutrales a convertir en positivos y negativos.\n",
    "neutrales = len(df) - (proporcion_positivos + proporcion_negativos)\n",
    "neutrales_a_positivos = round(neutrales / 2)\n",
    "neutrales_a_negativos = round(neutrales / 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Seleccionamos los índices de neutrales a convertir.\n",
    "neutrales_indices_positivos = df[df['sentiment'] == 'positive'].sample(min(neutrales_a_positivos, len(df[df['sentiment'] == 'positive'])), replace=False).index\n",
    "neutrales_indices_negativos = df[df['sentiment'] == 'negative'].sample(min(neutrales_a_negativos, len(df[df['sentiment'] == 'negative'])), replace=False).index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Asignamos aleatoriamente los neutrales convertidos a positivos y negativos.\n",
    "df.loc[neutrales_indices_positivos, 'sentiment'] = 'positive'\n",
    "df.loc[neutrales_indices_negativos, 'sentiment'] = 'negative'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "positive    0.599267\n",
      "negative    0.400733\n",
      "Name: sentiment, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Verificamos la nueva distribución.\n",
    "print(df['sentiment'].value_counts('%'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['positive', 'negative'], dtype=object)"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Verificamos que se haya ajustado la columna 'sentiment' al tipo de clases solicitadas.\n",
    "df['sentiment'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Por medio de esta función limpiamos de terminos que por su frecuencia de aparición podrian distorsionar la medición, lo anterior por medio de la \"stopwords\".\n",
    "Luego se realizara la lematización que significa, volver a su estado original de lema, una palabra específica para poder valorarla numéricamente una vez se ha transformado en un token, dado que vuelve al estado de entrada en que la encontrariamos en un diccionario, esto hara posible su posterior vectorización."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removemos los terminos.\n",
    "def remove_stopwords(text):\n",
    "    stop = stopwords.words('english')\n",
    "    return \" \".join(x for x in text.split() if x not in stop)\n",
    "df['content'] = df['content'].apply(remove_stopwords)\n",
    "\n",
    "# Lematizamos\n",
    "def lemmatize_words(text):\n",
    "    lemmatizer = WordNetLemmatizer()\n",
    "    return \" \".join([lemmatizer.lemmatize(word) for word in text.split()])\n",
    "\n",
    "df['content'] = df['content'].apply(lemmatize_words).copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Por ultimo debemos revisar que la informacion este limpia, sin ruido que la pueda afectar al momento de entrenar los modelos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>content</th>\n",
       "      <th>sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>34723</td>\n",
       "      <td>happy mama day mother</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>17493</td>\n",
       "      <td>lost please help find good home</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20198</td>\n",
       "      <td>yes yes networking whore fullest girl rih next</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6855</td>\n",
       "      <td>wish would tweet followed</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5924</td>\n",
       "      <td>microeconomics project ihate subject amp besid...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   tweet_id                                            content sentiment\n",
       "0     34723                              happy mama day mother  positive\n",
       "1     17493                    lost please help find good home  negative\n",
       "2     20198     yes yes networking whore fullest girl rih next  positive\n",
       "3      6855                          wish would tweet followed  positive\n",
       "4      5924  microeconomics project ihate subject amp besid...  negative"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Separación de conjuntos de entrenamiento y prueba, para su posterior evaluación de modelos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separamos los conjuntos de entrenamiento y prueba.\n",
    "X = df['content']\n",
    "y = df['sentiment']\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=12238)\n",
    "\n",
    "# Vectorizamos los valores por medio de TF-IDF.\n",
    "tfidf_vectorizer = TfidfVectorizer()\n",
    "X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\n",
    "X_test_tfidf = tfidf_vectorizer.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A contar de aca, se comienza con:\n",
    "\n",
    "El entrenamiento de los modelos.\n",
    "La identificación de los mejores modelos.\n",
    "La serialización de los mejores modelos.\n",
    "La visualización de resultados."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determinamos lo modelos de clasificacion a evaluar y se indica la grilla de hiperparametros a utilizar.\n",
    "\n",
    "models = {\n",
    "    'BernoulliNB': (BernoulliNB(), {'alpha': [0, 0.1, 1], 'fit_prior': [True, False]}),\n",
    "    'DecisionTreeClassifier': (DecisionTreeClassifier(class_weight='balanced'),\n",
    "                               {'max_depth': [3, 5, 7, 9, 11, 13], 'criterion': ['gini', 'entropy']}),\n",
    "    'RandomForestClassifier': (RandomForestClassifier(class_weight='balanced'),\n",
    "                               {'n_estimators': [5, 10, 15, 20, 25], 'max_depth': [3, 5, 7, 9, 11, 13]}),\n",
    "#'SVC': (SVC(class_weight='balanced', random_state=12238),{'C': [0.01, 0.1, 1.], 'kernel': ['linear', 'poly', 'rbf', 'sigmoid'], 'gamma': ['scale', 'auto']}),\n",
    "    'LogisticRegression': (LogisticRegression(class_weight='balanced', solver='liblinear', n_jobs=-1),\n",
    "                           {'C': [0.001, 0.01, 0.1, 1.], 'penalty': ['l1', 'l2']}),\n",
    "}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lamentablemente por falta de recursos informaticos (me falto mas compu) se deja comentada la linea de codigo del modelo\n",
    "SVC ya que no se logra visualizar habiendo tenido esperas de hasta 30 minutos cuando se analiza con validación cruzada."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training BernoulliNB without cross-validation...\n",
      "Training BernoulliNB with cross-validation...\n",
      "Training DecisionTreeClassifier without cross-validation...\n",
      "Training DecisionTreeClassifier with cross-validation...\n",
      "Training RandomForestClassifier without cross-validation...\n",
      "Training RandomForestClassifier with cross-validation...\n",
      "Training LogisticRegression without cross-validation...\n",
      "Training LogisticRegression with cross-validation...\n"
     ]
    }
   ],
   "source": [
    "# Creamos diccionarios vacios que contendran los modelos evaluados.\n",
    "#from sklearn.metrics import roc_auc_score\n",
    "results_no_cv = []\n",
    "results_cv = []\n",
    "\n",
    "# Entrenamos modelos con y sin validación cruzada\n",
    "for model_name, (model, param_grid) in models.items():\n",
    "    print(f\"Training {model_name} without cross-validation...\")\n",
    "\n",
    "    # Entrenamiento sin validación cruzada\n",
    "    model.fit(X_train_tfidf, y_train)\n",
    "    y_pred = model.predict(X_test_tfidf)\n",
    "    y_proba = model.predict_proba(X_test_tfidf)  # Probabilidades para log loss\n",
    "\n",
    "    # Calculamos las métricas sin validación cruzada, incluyendo log loss\n",
    "    logloss = log_loss(y_test, y_proba)\n",
    "\n",
    "    model_metrics = {\n",
    "        'Model': model_name,\n",
    "        'Validation Type': 'No CV',\n",
    "        'Best Parameters': 'N/A (no CV)',\n",
    "        'Accuracy': accuracy_score(y_test, y_pred),\n",
    "        'AUC-ROC': roc_auc_score(y_test, y_proba[:, 1]),\n",
    "        'Log Loss': logloss,\n",
    "        'Classification Report': classification_report(y_test, y_pred, output_dict=True),\n",
    "        'Confusion Matrix': confusion_matrix(y_test, y_pred)\n",
    "    }\n",
    "    results_no_cv.append(model_metrics)\n",
    "\n",
    "    print(f\"Training {model_name} with cross-validation...\")\n",
    "\n",
    "    # Entrenamiento con validación cruzada\n",
    "    grid_search = GridSearchCV(model, param_grid, cv=5)\n",
    "    grid_search.fit(X_train_tfidf, y_train)\n",
    "    best_model = grid_search.best_estimator_\n",
    "    y_pred_cv = best_model.predict(X_test_tfidf)\n",
    "    y_proba_cv = best_model.predict_proba(X_test_tfidf)  # Probabilidades para log loss\n",
    "\n",
    "    # Calculamos las métricas con validación cruzada, incluyendo log loss\n",
    "    logloss_cv = log_loss(y_test, y_proba_cv)\n",
    "\n",
    "    model_metrics_cv = {\n",
    "        'Model': model_name,\n",
    "        'Validation Type': 'CV',\n",
    "        'Best Parameters': grid_search.best_params_,\n",
    "        'Accuracy': grid_search.best_score_,\n",
    "        'AUC-ROC': roc_auc_score(y_test, y_proba_cv[:, 1]),\n",
    "        'Log Loss': logloss_cv,\n",
    "        'Classification Report': classification_report(y_test, y_pred_cv, output_dict=True),\n",
    "        'Confusion Matrix': confusion_matrix(y_test, y_pred_cv)\n",
    "    }\n",
    "    results_cv.append(model_metrics_cv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creamos un DataFrame con todos los resultados.\n",
    "results_df_no_cv = pd.DataFrame(results_no_cv)\n",
    "results_cv_df = pd.DataFrame(results_cv)\n",
    "results_df_combined = pd.concat([results_df_no_cv, results_cv_df], ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Crear una lista de todos los modelos con sus métricas\n",
    "all_models = results_no_cv + results_cv\n",
    "\n",
    "# Identificar los dos mejores modelos basados en la métrica deseada (por ejemplo, Accuracy)\n",
    "top_models = sorted(all_models, key=lambda x: x['Accuracy'], reverse=True)[:2]\n",
    "\n",
    "# Crear y serializar los dos mejores modelos\n",
    "best_models = []\n",
    "\n",
    "for model_info in top_models:\n",
    "    model_name = model_info['Model']\n",
    "    model = None\n",
    "\n",
    "    # Encuentra el modelo correspondiente en la lista de modelos originales\n",
    "    for model_key, (model_instance, _) in models.items():\n",
    "        if model_key == model_name:\n",
    "            model = model_instance\n",
    "            break\n",
    "\n",
    "    if model is not None:\n",
    "        # Entrenar el modelo con el conjunto de entrenamiento completo\n",
    "        model.fit(X_train_tfidf, y_train)\n",
    "\n",
    "        # Agregar el modelo a la lista de los mejores modelos\n",
    "        best_models.append((model_name, model))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El mejor modelo 1 se ha serializado y guardado como 'best_model_1.pkl'.\n",
      "El mejor modelo 2 se ha serializado y guardado como 'best_model_2.pkl'.\n"
     ]
    }
   ],
   "source": [
    "# Serializamos los dos mejores modelos\n",
    "for i, (model_name, model) in enumerate(best_models, start=1):\n",
    "    with open(f'best_model_{i}.pkl', 'wb') as model_file:\n",
    "        pickle.dump(model, model_file)\n",
    "        print(f\"El mejor modelo {i} se ha serializado y guardado como 'best_model_{i}.pkl'.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Combinamos los dos DataFrames en uno solo.\n",
    "results_df_combined = pd.concat([results_df_no_cv, results_cv_df], ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: BernoulliNB\n",
      "Validation Type: No CV\n",
      "Best Parameters: N/A (no CV)\n",
      "Accuracy: 0.7044444444444444\n",
      "AUC-ROC: 0.7552368439014402\n",
      "Log Loss: 0.6343283303283869\n",
      "Classification Report:\n",
      "{'negative': {'precision': 0.6773733047822984, 'recall': 0.48418367346938773, 'f1-score': 0.5647128830705147, 'support': 3920.0}, 'positive': {'precision': 0.7151310228233305, 'recall': 0.8488294314381271, 'f1-score': 0.7762654840189631, 'support': 5980.0}, 'accuracy': 0.7044444444444444, 'macro avg': {'precision': 0.6962521638028145, 'recall': 0.6665065524537575, 'f1-score': 0.6704891835447389, 'support': 9900.0}, 'weighted avg': {'precision': 0.7001804920434471, 'recall': 0.7044444444444444, 'f1-score': 0.6924992016232139, 'support': 9900.0}}\n",
      "Confusion Matrix:\n",
      "[[1898 2022]\n",
      " [ 904 5076]]\n",
      "========================================\n",
      "Model: DecisionTreeClassifier\n",
      "Validation Type: No CV\n",
      "Best Parameters: N/A (no CV)\n",
      "Accuracy: 0.6571717171717172\n",
      "AUC-ROC: 0.6441964072418265\n",
      "Log Loss: 11.767919132041348\n",
      "Classification Report:\n",
      "{'negative': {'precision': 0.5637730358874878, 'recall': 0.5931122448979592, 'f1-score': 0.5780706116360019, 'support': 3920.0}, 'positive': {'precision': 0.7238573407202216, 'recall': 0.6991638795986622, 'f1-score': 0.7112963593058862, 'support': 5980.0}, 'accuracy': 0.6571717171717172, 'macro avg': {'precision': 0.6438151883038548, 'recall': 0.6461380622483107, 'f1-score': 0.644683485470944, 'support': 9900.0}, 'weighted avg': {'precision': 0.6604704240591796, 'recall': 0.6571717171717172, 'f1-score': 0.6585443460871038, 'support': 9900.0}}\n",
      "Confusion Matrix:\n",
      "[[2325 1595]\n",
      " [1799 4181]]\n",
      "========================================\n",
      "Model: RandomForestClassifier\n",
      "Validation Type: No CV\n",
      "Best Parameters: N/A (no CV)\n",
      "Accuracy: 0.7054545454545454\n",
      "AUC-ROC: 0.7445622952358202\n",
      "Log Loss: 0.5998284153190995\n",
      "Classification Report:\n",
      "{'negative': {'precision': 0.6613110539845758, 'recall': 0.525, 'f1-score': 0.5853242320819113, 'support': 3920.0}, 'positive': {'precision': 0.7256923983500294, 'recall': 0.8237458193979933, 'f1-score': 0.7716165413533834, 'support': 5980.0}, 'accuracy': 0.7054545454545454, 'macro avg': {'precision': 0.6935017261673027, 'recall': 0.6743729096989967, 'f1-score': 0.6784703867176474, 'support': 9900.0}, 'weighted avg': {'precision': 0.7001999872477488, 'recall': 0.7054545454545454, 'f1-score': 0.6978523138438711, 'support': 9900.0}}\n",
      "Confusion Matrix:\n",
      "[[2058 1862]\n",
      " [1054 4926]]\n",
      "========================================\n",
      "Model: LogisticRegression\n",
      "Validation Type: No CV\n",
      "Best Parameters: N/A (no CV)\n",
      "Accuracy: 0.7015151515151515\n",
      "AUC-ROC: 0.7685584815029691\n",
      "Log Loss: 0.5748671900014126\n",
      "Classification Report:\n",
      "{'negative': {'precision': 0.6102857142857143, 'recall': 0.6811224489795918, 'f1-score': 0.64376130198915, 'support': 3920.0}, 'positive': {'precision': 0.7737556561085973, 'recall': 0.7148829431438127, 'f1-score': 0.7431551499348109, 'support': 5980.0}, 'accuracy': 0.7015151515151515, 'macro avg': {'precision': 0.6920206851971558, 'recall': 0.6980026960617023, 'f1-score': 0.6934582259619805, 'support': 9900.0}, 'weighted avg': {'precision': 0.7090281639928699, 'recall': 0.7015151515151515, 'f1-score': 0.7037992020613776, 'support': 9900.0}}\n",
      "Confusion Matrix:\n",
      "[[2670 1250]\n",
      " [1705 4275]]\n",
      "========================================\n"
     ]
    }
   ],
   "source": [
    "# Imprimir resultados de modelos sin validación cruzada\n",
    "for model_metrics in results_no_cv:\n",
    "    print(\"Model:\", model_metrics['Model'])\n",
    "    print(\"Validation Type:\", model_metrics['Validation Type'])\n",
    "    print(\"Best Parameters:\", model_metrics['Best Parameters'])\n",
    "    print(\"Accuracy:\", model_metrics['Accuracy'])\n",
    "    print(\"AUC-ROC:\", model_metrics['AUC-ROC'])\n",
    "    print(\"Log Loss:\", model_metrics['Log Loss'])\n",
    "    print(\"Classification Report:\")\n",
    "    print(model_metrics['Classification Report'])\n",
    "    print(\"Confusion Matrix:\")\n",
    "    print(model_metrics['Confusion Matrix'])\n",
    "    print(\"=\" * 40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: BernoulliNB\n",
      "Validation Type: CV\n",
      "Best Parameters: {'alpha': 1, 'fit_prior': False}\n",
      "Accuracy: 0.6906467661691542\n",
      "AUC-ROC: 0.7552368439014402\n",
      "Log Loss: 0.6237370373914405\n",
      "Classification Report:\n",
      "{'negative': {'precision': 0.6423841059602649, 'recall': 0.5691326530612245, 'f1-score': 0.6035438928716353, 'support': 3920.0}, 'positive': {'precision': 0.7372024272599969, 'recall': 0.7923076923076923, 'f1-score': 0.7637623921979527, 'support': 5980.0}, 'accuracy': 0.703939393939394, 'macro avg': {'precision': 0.6897932666101309, 'recall': 0.6807201726844584, 'f1-score': 0.683653142534794, 'support': 9900.0}, 'weighted avg': {'precision': 0.6996582030685878, 'recall': 0.703939393939394, 'f1-score': 0.7003223399394513, 'support': 9900.0}}\n",
      "Confusion Matrix:\n",
      "[[2231 1689]\n",
      " [1242 4738]]\n",
      "========================================\n",
      "Model: DecisionTreeClassifier\n",
      "Validation Type: CV\n",
      "Best Parameters: {'criterion': 'entropy', 'max_depth': 13}\n",
      "Accuracy: 0.6514427860696517\n",
      "AUC-ROC: 0.6170761168179646\n",
      "Log Loss: 1.0083811085881176\n",
      "Classification Report:\n",
      "{'negative': {'precision': 0.7761341222879684, 'recall': 0.20076530612244897, 'f1-score': 0.31901094446696393, 'support': 3920.0}, 'positive': {'precision': 0.6474229124465452, 'recall': 0.9620401337792642, 'f1-score': 0.7739808960043053, 'support': 5980.0}, 'accuracy': 0.6606060606060606, 'macro avg': {'precision': 0.7117785173672568, 'recall': 0.5814027199508566, 'f1-score': 0.5464959202356346, 'support': 9900.0}, 'weighted avg': {'precision': 0.698387351090826, 'recall': 0.6606060606060606, 'f1-score': 0.5938311778198226, 'support': 9900.0}}\n",
      "Confusion Matrix:\n",
      "[[ 787 3133]\n",
      " [ 227 5753]]\n",
      "========================================\n",
      "Model: RandomForestClassifier\n",
      "Validation Type: CV\n",
      "Best Parameters: {'max_depth': 11, 'n_estimators': 20}\n",
      "Accuracy: 0.6602985074626866\n",
      "AUC-ROC: 0.6813793427069824\n",
      "Log Loss: 0.6761740662580019\n",
      "Classification Report:\n",
      "{'negative': {'precision': 0.5786833855799373, 'recall': 0.47091836734693876, 'f1-score': 0.5192686357243319, 'support': 3920.0}, 'positive': {'precision': 0.6909090909090909, 'recall': 0.7752508361204014, 'f1-score': 0.7306540583136328, 'support': 5980.0}, 'accuracy': 0.6547474747474747, 'macro avg': {'precision': 0.634796238244514, 'recall': 0.6230846017336701, 'f1-score': 0.6249613470189823, 'support': 9900.0}, 'weighted avg': {'precision': 0.6464722459706785, 'recall': 0.6547474747474747, 'f1-score': 0.6469539717934247, 'support': 9900.0}}\n",
      "Confusion Matrix:\n",
      "[[1846 2074]\n",
      " [1344 4636]]\n",
      "========================================\n",
      "Model: LogisticRegression\n",
      "Validation Type: CV\n",
      "Best Parameters: {'C': 1.0, 'penalty': 'l1'}\n",
      "Accuracy: 0.6983582089552238\n",
      "AUC-ROC: 0.7679390058699065\n",
      "Log Loss: 0.5778286733558927\n",
      "Classification Report:\n",
      "{'negative': {'precision': 0.622668927100993, 'recall': 0.6558673469387755, 'f1-score': 0.6388371226239283, 'support': 3920.0}, 'positive': {'precision': 0.7662450181944204, 'recall': 0.7394648829431438, 'f1-score': 0.7526167985703345, 'support': 5980.0}, 'accuracy': 0.7063636363636364, 'macro avg': {'precision': 0.6944569726477067, 'recall': 0.6976661149409596, 'f1-score': 0.6957269605971315, 'support': 9900.0}, 'weighted avg': {'precision': 0.7093946871756087, 'recall': 0.7063636363636364, 'f1-score': 0.7075646440541817, 'support': 9900.0}}\n",
      "Confusion Matrix:\n",
      "[[2571 1349]\n",
      " [1558 4422]]\n",
      "========================================\n"
     ]
    }
   ],
   "source": [
    "# Imprimir resultados de modelos con validación cruzada\n",
    "for model_metrics_cv in results_cv:\n",
    "    print(\"Model:\", model_metrics_cv['Model'])\n",
    "    print(\"Validation Type:\", model_metrics_cv['Validation Type'])\n",
    "    print(\"Best Parameters:\", model_metrics_cv['Best Parameters'])\n",
    "    print(\"Accuracy:\", model_metrics_cv['Accuracy'])\n",
    "    print(\"AUC-ROC:\", model_metrics_cv['AUC-ROC'])\n",
    "    print(\"Log Loss:\", model_metrics_cv['Log Loss'])\n",
    "    print(\"Classification Report:\")\n",
    "    print(model_metrics_cv['Classification Report'])\n",
    "    print(\"Confusion Matrix:\")\n",
    "    print(model_metrics_cv['Confusion Matrix'])\n",
    "    print(\"=\" * 40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: RandomForestClassifier\n",
      "Best Parameters: N/A (no CV)\n",
      "Accuracy: 0.705\n",
      "AUC-ROC: 0.745\n",
      "Log Loss: 0.600\n",
      "Classification Report:\n",
      "{'negative': {'precision': 0.6613110539845758, 'recall': 0.525, 'f1-score': 0.5853242320819113, 'support': 3920.0}, 'positive': {'precision': 0.7256923983500294, 'recall': 0.8237458193979933, 'f1-score': 0.7716165413533834, 'support': 5980.0}, 'accuracy': 0.7054545454545454, 'macro avg': {'precision': 0.6935017261673027, 'recall': 0.6743729096989967, 'f1-score': 0.6784703867176474, 'support': 9900.0}, 'weighted avg': {'precision': 0.7001999872477488, 'recall': 0.7054545454545454, 'f1-score': 0.6978523138438711, 'support': 9900.0}}\n",
      "Confusion Matrix:\n",
      "[[2058 1862]\n",
      " [1054 4926]]\n",
      "========================================\n",
      "Model: BernoulliNB\n",
      "Best Parameters: N/A (no CV)\n",
      "Accuracy: 0.704\n",
      "AUC-ROC: 0.755\n",
      "Log Loss: 0.634\n",
      "Classification Report:\n",
      "{'negative': {'precision': 0.6773733047822984, 'recall': 0.48418367346938773, 'f1-score': 0.5647128830705147, 'support': 3920.0}, 'positive': {'precision': 0.7151310228233305, 'recall': 0.8488294314381271, 'f1-score': 0.7762654840189631, 'support': 5980.0}, 'accuracy': 0.7044444444444444, 'macro avg': {'precision': 0.6962521638028145, 'recall': 0.6665065524537575, 'f1-score': 0.6704891835447389, 'support': 9900.0}, 'weighted avg': {'precision': 0.7001804920434471, 'recall': 0.7044444444444444, 'f1-score': 0.6924992016232139, 'support': 9900.0}}\n",
      "Confusion Matrix:\n",
      "[[1898 2022]\n",
      " [ 904 5076]]\n",
      "========================================\n"
     ]
    }
   ],
   "source": [
    "# Identificamos los dos mejores modelos por Accuracy.\n",
    "\n",
    "top_models = results_df_combined.nlargest(2, 'Accuracy')\n",
    "\n",
    "# Mostramos los resultados de los dos mejores modelos.\n",
    "\n",
    "for idx, row in top_models.iterrows():\n",
    "    print(f\"Model: {row['Model']}\")\n",
    "    print(f\"Best Parameters: {row['Best Parameters']}\")\n",
    "    print(f\"Accuracy: {row['Accuracy']:.3f}\")\n",
    "    print(f\"AUC-ROC: {row['AUC-ROC']:.3f}\")\n",
    "    print(f\"Log Loss: {row['Log Loss']:.3f}\")\n",
    "    print(\"Classification Report:\")\n",
    "    print(row['Classification Report'])\n",
    "    print(\"Confusion Matrix:\")\n",
    "    print(row['Confusion Matrix'])\n",
    "    print(\"=\" * 40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creamos un gráfico de barras para comparar modelos.\n",
    "\n",
    "plt.figure(figsize=(15, 8))\n",
    "sns.barplot(data=results_df_combined, x='Model', y='Accuracy', hue='Validation Type', palette='viridis')\n",
    "plt.title('Accuracy Comparison of Models with and without Cross-Validation')\n",
    "plt.xticks(rotation=45)\n",
    "plt.xlabel('Model')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.ylim(0, 1)\n",
    "plt.legend(title='Validation Type', loc='lower right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Análisis del comportamiento del vector objetivo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Modelo: BernoulliNB (No CV)\n",
    "\n",
    "Accuracy: 0.7044\n",
    "AUC-ROC: 0.7552\n",
    "Log Loss: 0.6343\n",
    "Este modelo tiene una precisión bastante equilibrada entre las clases negativa y positiva, con una mayor precisión en la clase positiva.\n",
    "El recall para la clase positiva es significativamente más alto que para la clase negativa, lo que indica que el modelo tiende a predecir bien los casos positivos pero no los negativos.\n",
    "El valor F1-score para la clase positiva es alto (0.7763), lo que indica un buen equilibrio entre precisión y recall en esta clase.\n",
    "La matriz de confusión muestra que el modelo tiene dificultades para clasificar correctamente los casos negativos."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Modelo: DecisionTreeClassifier (No CV)\n",
    "\n",
    "Accuracy: 0.6590\n",
    "AUC-ROC: 0.6476\n",
    "Log Loss: 11.7022\n",
    "Este modelo tiene una precisión más baja en comparación con el modelo BernoulliNB.\n",
    "El recall es más equilibrado entre las clases negativa y positiva en comparación con BernoulliNB.\n",
    "El valor F1-score es razonable en ambas clases, pero el log loss extremadamente alto sugiere un problema de calibración de probabilidades y un rendimiento deficiente en términos de estimación de probabilidad."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Modelo: RandomForestClassifier (No CV)\n",
    "\n",
    "Accuracy: 0.7063\n",
    "AUC-ROC: 0.7471\n",
    "Log Loss: 0.6010\n",
    "Este modelo tiene una precisión equilibrada entre las clases negativa y positiva, con un mayor recall en la clase positiva.\n",
    "El valor F1-score para la clase positiva es alto (0.7711), lo que indica un buen equilibrio entre precisión y recall en esta clase.\n",
    "La matriz de confusión muestra que el modelo tiene un rendimiento razonable en la clasificación de ambas clases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Modelo: LogisticRegression (No CV)\n",
    "\n",
    "Accuracy: 0.7015\n",
    "AUC-ROC: 0.7686\n",
    "Log Loss: 0.5749\n",
    "Este modelo tiene una precisión equilibrada entre las clases negativa y positiva, con una mayor precisión en la clase positiva.\n",
    "El valor F1-score para la clase positiva es alto (0.7432), lo que indica un buen equilibrio entre precisión y recall en esta clase.\n",
    "La matriz de confusión muestra que el modelo tiene un rendimiento razonable en la clasificación de ambas clases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Modelo: BernoulliNB (CV)\n",
    "\n",
    "Accuracy: 0.6906\n",
    "AUC-ROC: 0.7552\n",
    "Log Loss: 0.6237\n",
    "Este modelo tiene una precisión equilibrada entre las clases negativa y positiva, con un mayor recall en la clase positiva.\n",
    "El valor F1-score para la clase positiva es alto (0.7638), lo que indica un buen equilibrio entre precisión y recall en esta clase.\n",
    "La matriz de confusión muestra que el modelo tiene un rendimiento razonable en la clasificación de ambas clases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Modelo: DecisionTreeClassifier (CV)\n",
    "\n",
    "Accuracy: 0.6512\n",
    "AUC-ROC: 0.6173\n",
    "Log Loss: 0.9846\n",
    "Este modelo tiene una precisión significativamente más alta en la clase positiva en comparación con la clase negativa.\n",
    "El valor F1-score para la clase positiva es alto (0.7737), lo que indica un buen equilibrio entre precisión y recall en esta clase.\n",
    "La matriz de confusión muestra que el modelo tiene dificultades para clasificar correctamente los casos negativos y tiene un rendimiento deficiente en términos de log loss."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Modelo: RandomForestClassifier (CV)\n",
    "\n",
    "Accuracy: 0.6616\n",
    "AUC-ROC: 0.6992\n",
    "Log Loss: 0.6759\n",
    "Este modelo tiene una precisión equilibrada entre las clases negativa y positiva, con un mayor recall en la clase positiva.\n",
    "El valor F1-score para la clase positiva es alto (0.7526), lo que indica un buen equilibrio entre precisión y recall en esta clase.\n",
    "La matriz de confusión muestra que el modelo tiene dificultades para clasificar correctamente los casos negativos."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Modelo: LogisticRegression (CV)\n",
    "\n",
    "Accuracy: 0.6984\n",
    "AUC-ROC: 0.7679\n",
    "Log Loss: 0.5778\n",
    "Este modelo tiene una precisión equilibrada entre las clases negativa y positiva, con una mayor precisión en la clase positiva.\n",
    "El valor F1-score para la clase positiva es alto (0.7526), lo que indica un buen equilibrio entre precisión y recall en esta clase.\n",
    "La matriz de confusión muestra que el modelo tiene un rendimiento razonable en la clasificación de ambas clases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En resumen, el rendimiento de los modelos varía en función de las métricas evaluadas. El modelo RandomForestClassifier (No CV) parece tener el mejor rendimiento global en términos de precisión (Accuracy), AUC-ROC y log loss, seguido por el modelo LogisticRegression (No CV). Sin embargo, el modelo RandomForestClassifier (CV) tiene un log loss más alto, lo que sugiere un problema de calibración de probabilidades. La elección del mejor modelo depende de las métricas específicas que sean más relevantes para el problema en cuestión y de si se prefiere un modelo con mejor calibración de probabilidades o un modelo con un rendimiento general más alto en términos de precisión y AUC-ROC."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
